# Python Mover Status Monitor - Product Requirements Document

## Overview
A modern, modular Python 3.13 application that monitors the Unraid mover process, calculates progress metrics, and delivers status notifications through a plugin-based provider system. The application emphasizes extensibility, maintainability, and clean architecture principles while solving the critical need for real-time visibility into long-running mover operations.

**Problem Statement**: Unraid users lack visibility into mover process progress, leading to uncertainty about completion times and inability to plan system maintenance windows effectively.

**Solution**: A comprehensive monitoring system that provides real-time progress tracking, intelligent ETC calculations, and flexible notification delivery through multiple channels.

**Target Users**: Unraid system administrators, home lab enthusiasts, and enterprise users managing large-scale data movement operations.

## Core Features

### 1. Process Detection & Monitoring
- **Automatic Unraid mover process detection** using psutil and proc filesystem
- **Real-time process state tracking** with finite state machine implementation
- **Robust process lifecycle management** handling start, monitoring, and completion phases
- **Cross-platform compatibility** with extensible detector architecture

### 2. Progress Calculation & Estimation
- **Intelligent progress percentage calculation** based on filesystem analysis
- **Adaptive ETC estimation** using moving average algorithms and transfer rate history
- **Historical progress tracking** with trend analysis and velocity calculations
- **Edge case handling** for zero-size transfers and variable transfer speeds

### 3. Plugin-Based Notification System
- **Extensible provider architecture** supporting Discord, Telegram, and custom providers
- **Parallel notification dispatch** with timeout handling and delivery confirmation
- **Rich message formatting** with platform-specific optimizations
- **Retry logic with exponential backoff** and circuit breaker patterns

### 4. Configuration Management
- **YAML-based configuration** with environment variable overrides
- **JSON Schema validation** with comprehensive error reporting
- **Hot-reloading support** for configuration changes without restart
- **Provider-specific configuration isolation** with dynamic enable/disable

## User Experience

### User Personas
1. **Home Lab Administrator**: Manages personal Unraid server, wants simple setup and Discord notifications
2. **Enterprise IT Manager**: Oversees multiple systems, requires detailed logging and multiple notification channels
3. **Power User**: Customizes monitoring behavior, develops custom notification providers

### Key User Flows
1. **Initial Setup**: Install → Configure providers → Test notifications → Start monitoring
2. **Daily Operation**: Automatic monitoring → Progress notifications → Completion alerts
3. **Troubleshooting**: View logs → Adjust configuration → Test provider connectivity

### UI/UX Considerations
- **Command-line interface** with intuitive argument parsing and help system
- **Dry-run mode** for testing configuration without side effects
- **Structured logging** with configurable verbosity levels
- **Clear error messages** with actionable resolution steps

## Technical Architecture

### System Components
- **Application Layer**: Dependency injection container, CLI interface, application runner
- **Core Business Logic**: Monitoring orchestration, process detection, progress tracking, data collection
- **Configuration System**: Multi-source loading, validation, and management
- **Notification System**: Provider registry, message dispatch, and delivery tracking
- **Plugin System**: Dynamic loading, validation, and lifecycle management
- **Utilities**: Formatting, time handling, logging, and validation helpers

### Data Models
- **Process Information**: PID, command line, start time, state enumeration
- **Progress Metrics**: Percentage, bytes remaining, transfer rate, ETC
- **Notification Events**: Status updates, completion alerts, error notifications
- **Configuration Models**: Main config, provider configs with Pydantic validation

### APIs and Integrations
- **Discord Webhook API**: Rich embed support with progress visualization
- **Telegram Bot API**: HTML/Markdown formatting with multiple chat support
- **Filesystem APIs**: Efficient directory traversal with exclusion patterns
- **Process APIs**: Cross-platform process detection and monitoring

### Infrastructure Requirements
- **Python 3.13** runtime environment
- **uv** for dependency and project management
- **File system access** for directory scanning and size calculation
- **Network connectivity** for notification delivery
- **Process monitoring capabilities** for mover detection

## Development Methodology - Test-Driven Development (TDD)

### TDD as Core Requirement
**MANDATORY**: All development MUST follow Test-Driven Development principles as a non-negotiable standard.

### TDD Implementation Standards
1. **Red-Green-Refactor Cycle**: Write failing tests first, implement minimal code to pass, then refactor
2. **Test-First Development**: No production code without corresponding tests written first
3. **100% Test Coverage**: All modules, functions, and edge cases must be covered
4. **Test File Structure**: Complete mirror of source structure in tests/ directory

### TDD Workflow Requirements
- **For New Features**: Create/update unit tests first, then implement the feature
- **For Modifications**: Update test files first, then modify implementation
- **For Bug Fixes**: Write test reproducing the bug, then fix the implementation
- **Integration Tests**: Test component interactions and full system workflows

### Testing Standards
- **Unit Tests**: Focused testing of individual components with extensive mocking
- **Integration Tests**: Component interaction testing with realistic scenarios
- **End-to-End Tests**: Full system testing including dry-run validation
- **Type Safety**: 0 errors and 0 warnings from basedpyright across ALL code including tests

## Development Roadmap

### Phase 1: Foundation (MVP)
**Core Infrastructure**
- Project structure setup with uv and pyproject.toml
- Base configuration system with YAML loading and validation
- Logging infrastructure with structured output
- Basic CLI interface with argument parsing
- Process detection framework with Unraid implementation
- Filesystem scanning with size calculation
- Progress calculation algorithms

**Deliverable**: Functional mover detection and progress calculation without notifications

### Phase 2: Notification System
**Provider Architecture**
- Abstract notification provider base class
- Provider registry and dynamic loading system
- Message formatting and dispatch infrastructure
- Retry logic with exponential backoff
- Discord provider with webhook integration
- Rich embed generation with progress visualization

**Deliverable**: Working Discord notifications with progress updates

### Phase 3: Enhanced Monitoring
**Advanced Features**
- State machine for monitoring lifecycle
- Event bus for decoupled component communication
- Historical progress tracking with trend analysis
- ETC estimation with adaptive algorithms
- Configuration hot-reloading
- Comprehensive error handling and recovery

**Deliverable**: Production-ready monitoring with intelligent progress estimation

### Phase 4: Extended Providers
**Additional Integrations**
- Telegram provider with Bot API integration
- Template provider for custom development
- Plugin validation and lifecycle management
- Provider-specific configuration management
- Enhanced message formatting options

**Deliverable**: Multi-provider notification support with extensible architecture

### Phase 5: Production Hardening
**Reliability & Performance**
- Comprehensive integration test suite
- Performance optimization for large filesystems
- Memory usage optimization
- Graceful shutdown handling
- Signal interception and cleanup
- Production deployment documentation

**Deliverable**: Enterprise-ready application with full test coverage

## Logical Dependency Chain

### Foundation First
1. **Project Setup**: uv configuration, dependency management, basic structure
2. **Configuration System**: YAML loading, validation, environment overrides
3. **Logging Infrastructure**: Structured logging with multiple handlers
4. **Utilities**: Formatting, time handling, validation helpers

### Core Functionality
5. **Process Detection**: Abstract interface and Unraid implementation
6. **Filesystem Operations**: Directory scanning, size calculation, exclusions
7. **Progress Calculation**: Basic percentage and metrics calculation
8. **CLI Interface**: Argument parsing, dry-run mode, help system

### Notification Foundation
9. **Provider Base Classes**: Abstract interfaces and common functionality
10. **Message Models**: Status, event, and formatting data structures
11. **Registry System**: Provider discovery and management
12. **Dispatch Infrastructure**: Message routing and delivery tracking

### Provider Implementation
13. **Discord Provider**: Webhook client, embed generation, error handling
14. **Telegram Provider**: Bot API client, message formatting, chat management
15. **Template Provider**: Reference implementation and documentation

### Advanced Features
16. **State Machine**: Monitoring lifecycle management
17. **Event Bus**: Decoupled component communication
18. **Progress Tracking**: Historical data and trend analysis
19. **ETC Estimation**: Adaptive algorithms and rate calculation

### Integration & Testing
20. **Integration Tests**: Component interaction validation
21. **End-to-End Tests**: Full system workflow testing
22. **Performance Testing**: Large filesystem handling
23. **Error Recovery**: Failure scenarios and graceful degradation

## Risks and Mitigations

### Technical Challenges
**Risk**: Complex filesystem operations causing performance issues
**Mitigation**: Implement efficient scanning algorithms, caching mechanisms, and configurable exclusion patterns

**Risk**: Network failures disrupting notification delivery
**Mitigation**: Robust retry logic, circuit breaker patterns, and offline queuing

**Risk**: Process detection reliability across different Unraid versions
**Mitigation**: Comprehensive testing matrix, fallback detection methods, and configurable process matching

### MVP Definition
**Risk**: Feature creep preventing timely MVP delivery
**Mitigation**: Strict phase-based development with clear deliverables and acceptance criteria

**Risk**: Over-engineering the plugin system before core functionality
**Mitigation**: Start with simple provider interface, evolve based on actual requirements

### Resource Constraints
**Risk**: Maintaining 100% test coverage slowing development
**Mitigation**: TDD approach ensures tests are integral to development, not overhead

**Risk**: Type safety requirements creating development friction
**Mitigation**: Leverage modern Python 3.13 typing features and basedpyright integration

## Appendix

### Complete Project Tree Structure
```
.
├── LICENSE
├── README.md
├── mover-status.svg
├── pyproject.toml
├── src/
│   └── mover_status/
│       ├── __init__.py
│       ├── __main__.py
│       ├── config.yaml
│       ├── app/
│       │   ├── __init__.py
│       │   ├── application.py
│       │   ├── cli.py
│       │   └── runner.py
│       ├── core/
│       │   ├── __init__.py
│       │   ├── monitor/
│       │   │   ├── __init__.py
│       │   │   ├── orchestrator.py
│       │   │   ├── state_machine.py
│       │   │   └── event_bus.py
│       │   ├── process/
│       │   │   ├── __init__.py
│       │   │   ├── detector.py
│       │   │   ├── unraid_detector.py
│       │   │   └── models.py
│       │   ├── progress/
│       │   │   ├── __init__.py
│       │   │   ├── calculator.py
│       │   │   ├── estimator.py
│       │   │   ├── tracker.py
│       │   │   └── models.py
│       │   └── data/
│       │       ├── __init__.py
│       │       ├── collector.py
│       │       ├── filesystem/
│       │       │   ├── __init__.py
│       │       │   ├── scanner.py
│       │       │   ├── size_calculator.py
│       │       │   └── exclusions.py
│       │       └── models.py
│       ├── config/
│       │   ├── __init__.py
│       │   ├── loader/
│       │   │   ├── __init__.py
│       │   │   ├── yaml_loader.py
│       │   │   ├── env_loader.py
│       │   │   └── merger.py
│       │   ├── validator/
│       │   │   ├── __init__.py
│       │   │   ├── schema_validator.py
│       │   │   ├── rules.py
│       │   │   └── errors.py
│       │   ├── manager/
│       │   │   ├── __init__.py
│       │   │   ├── config_manager.py
│       │   │   └── provider_configs.py
│       │   └── models/
│       │       ├── __init__.py
│       │       ├── base.py
│       │       ├── main_config.py
│       │       └── provider_config.py
│       ├── notifications/
│       │   ├── __init__.py
│       │   ├── manager/
│       │   │   ├── __init__.py
│       │   │   ├── notification_manager.py
│       │   │   ├── provider_registry.py
│       │   │   └── dispatcher.py
│       │   ├── base/
│       │   │   ├── __init__.py
│       │   │   ├── provider.py
│       │   │   ├── exceptions.py
│       │   │   └── retry.py
│       │   └── models/
│       │       ├── __init__.py
│       │       ├── status.py
│       │       ├── message.py
│       │       └── event.py
│       ├── plugins/
│       │   ├── __init__.py
│       │   ├── loader/
│       │   │   ├── __init__.py
│       │   │   ├── plugin_loader.py
│       │   │   ├── validator.py
│       │   │   └── exceptions.py
│       │   ├── template/
│       │   │   ├── __init__.py
│       │   │   ├── provider.py
│       │   │   ├── config.py
│       │   │   ├── models.py
│       │   │   └── README.md
│       │   ├── discord/
│       │   │   ├── __init__.py
│       │   │   ├── provider.py
│       │   │   ├── config.py
│       │   │   ├── models.py
│       │   │   ├── webhook/
│       │   │   │   ├── __init__.py
│       │   │   │   ├── client.py
│       │   │   │   └── formatter.py
│       │   │   └── embeds/
│       │   │       ├── __init__.py
│       │   │       ├── builder.py
│       │   │       └── colors.py
│       │   └── telegram/
│       │       ├── __init__.py
│       │       ├── provider.py
│       │       ├── config.py
│       │       ├── models.py
│       │       ├── bot/
│       │       │   ├── __init__.py
│       │       │   ├── client.py
│       │       │   └── api.py
│       │       └── formatting/
│       │           ├── __init__.py
│       │           ├── html_formatter.py
│       │           └── markdown_formatter.py
│       └── utils/
│           ├── __init__.py
│           ├── formatting/
│           │   ├── __init__.py
│           │   ├── size_formatter.py
│           │   ├── time_formatter.py
│           │   └── percentage_formatter.py
│           ├── time/
│           │   ├── __init__.py
│           │   ├── calculator.py
│           │   ├── timezone.py
│           │   └── relative.py
│           ├── logging/
│           │   ├── __init__.py
│           │   ├── logger.py
│           │   ├── formatters.py
│           │   └── handlers.py
│           └── validation/
│               ├── __init__.py
│               ├── validators.py
│               └── sanitizers.py
├── tests/
│   ├── __init__.py
│   ├── conftest.py
│   ├── fixtures/
│   │   ├── __init__.py
│   │   ├── filesystem.py
│   │   ├── process.py
│   │   ├── config.py
│   │   └── plugins.py
│   ├── unit/
│   │   ├── __init__.py
│   │   ├── app/
│   │   │   ├── __init__.py
│   │   │   ├── test_application.py
│   │   │   ├── test_cli.py
│   │   │   └── test_runner.py
│   │   ├── core/
│   │   │   ├── __init__.py
│   │   │   ├── monitor/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_orchestrator.py
│   │   │   │   ├── test_state_machine.py
│   │   │   │   └── test_event_bus.py
│   │   │   ├── process/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_detector.py
│   │   │   │   ├── test_unraid_detector.py
│   │   │   │   └── test_models.py
│   │   │   ├── progress/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_calculator.py
│   │   │   │   ├── test_estimator.py
│   │   │   │   ├── test_tracker.py
│   │   │   │   └── test_models.py
│   │   │   └── data/
│   │   │       ├── __init__.py
│   │   │       ├── test_collector.py
│   │   │       ├── filesystem/
│   │   │       │   ├── __init__.py
│   │   │       │   ├── test_scanner.py
│   │   │       │   ├── test_size_calculator.py
│   │   │       │   └── test_exclusions.py
│   │   │       └── test_models.py
│   │   ├── config/
│   │   │   ├── __init__.py
│   │   │   ├── loader/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_yaml_loader.py
│   │   │   │   ├── test_env_loader.py
│   │   │   │   └── test_merger.py
│   │   │   ├── validator/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_schema_validator.py
│   │   │   │   ├── test_rules.py
│   │   │   │   └── test_errors.py
│   │   │   ├── manager/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_config_manager.py
│   │   │   │   └── test_provider_configs.py
│   │   │   └── models/
│   │   │       ├── __init__.py
│   │   │       ├── test_base.py
│   │   │       ├── test_main_config.py
│   │   │       └── test_provider_config.py
│   │   ├── notifications/
│   │   │   ├── __init__.py
│   │   │   ├── manager/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_notification_manager.py
│   │   │   │   ├── test_provider_registry.py
│   │   │   │   └── test_dispatcher.py
│   │   │   ├── base/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_provider.py
│   │   │   │   ├── test_exceptions.py
│   │   │   │   └── test_retry.py
│   │   │   └── models/
│   │   │       ├── __init__.py
│   │   │       ├── test_status.py
│   │   │       ├── test_message.py
│   │   │       └── test_event.py
│   │   ├── plugins/
│   │   │   ├── __init__.py
│   │   │   ├── loader/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_plugin_loader.py
│   │   │   │   ├── test_validator.py
│   │   │   │   └── test_exceptions.py
│   │   │   ├── template/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_provider.py
│   │   │   │   ├── test_config.py
│   │   │   │   └── test_models.py
│   │   │   ├── discord/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── test_provider.py
│   │   │   │   ├── test_config.py
│   │   │   │   ├── test_models.py
│   │   │   │   ├── webhook/
│   │   │   │   │   ├── __init__.py
│   │   │   │   │   ├── test_client.py
│   │   │   │   │   └── test_formatter.py
│   │   │   │   └── embeds/
│   │   │   │       ├── __init__.py
│   │   │   │       ├── test_builder.py
│   │   │   │       └── test_colors.py
│   │   │   └── telegram/
│   │   │       ├── __init__.py
│   │   │       ├── test_provider.py
│   │   │       ├── test_config.py
│   │   │       ├── test_models.py
│   │   │       ├── bot/
│   │   │       │   ├── __init__.py
│   │   │       │   ├── test_client.py
│   │   │       │   └── test_api.py
│   │   │       └── formatting/
│   │   │           ├── __init__.py
│   │   │           ├── test_html_formatter.py
│   │   │           └── test_markdown_formatter.py
│   │   └── utils/
│   │       ├── __init__.py
│   │       ├── formatting/
│   │       │   ├── __init__.py
│   │       │   ├── test_size_formatter.py
│   │       │   ├── test_time_formatter.py
│   │       │   └── test_percentage_formatter.py
│   │       ├── time/
│   │       │   ├── __init__.py
│   │       │   ├── test_calculator.py
│   │       │   ├── test_timezone.py
│   │       │   └── test_relative.py
│   │       ├── logging/
│   │       │   ├── __init__.py
│   │       │   ├── test_logger.py
│   │       │   ├── test_formatters.py
│   │       │   └── test_handlers.py
│   │       └── validation/
│   │           ├── __init__.py
│   │           ├── test_validators.py
│   │           └── test_sanitizers.py
│   └── integration/
│       ├── __init__.py
│       ├── scenarios/
│       │   ├── __init__.py
│       │   ├── test_full_cycle.py
│       │   ├── test_plugin_lifecycle.py
│       │   ├── test_config_changes.py
│       │   └── test_failure_recovery.py
│       └── e2e/
│           ├── __init__.py
│           ├── test_dry_run.py
│           └── test_notification_flow.py
└── configs/
    ├── examples/
    │   ├── config_discord.yaml.example
    │   └── config_telegram.yaml.example
    └── schemas/
        ├── main_config_schema.json
        └── provider_config_schema.json
```

### Python Development Standards
- **Python 3.13** with full type annotations and modern typing features
- **uv/uvx** for all Python commands and dependency management
- **basedpyright** with 0 errors/0 warnings mandatory across ALL code
- **pytest** with 100% test coverage requirement
- **TDD methodology** as non-negotiable development standard
- **Type safety** with proper fixes over ignore comments
- **Structured logging** with configurable verbosity and handlers

### Technical Specifications
- **Configuration**: YAML with JSON Schema validation and environment overrides
- **Plugin Architecture**: Dynamic loading with interface validation
- **Notification Providers**: Discord webhooks, Telegram Bot API, extensible template
- **Process Detection**: Cross-platform with Unraid-specific implementation
- **Progress Tracking**: Filesystem-based with intelligent ETC estimation
- **Error Handling**: Comprehensive exception hierarchy with recovery strategies
